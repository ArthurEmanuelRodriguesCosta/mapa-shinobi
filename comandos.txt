mkdir mapa-shinobi
cd mapa-shinobi
npm install -g shapefile
shp2json dados/pb_setores_censitarios/25SEE250GC_SIR.shp -o pb.json
less pb.json
npm install -g d3-geo-projection
geoproject 'd3.geoOrthographic().rotate([54, 14, -2]).fitSize([1000, 600], d)' < pb.json > pb-ortho.json
geo2svg  -w 1000 -h 600 < pb-ortho.json > pb-ortho.svg
npm install -g ndjson-cli
ndjson-split 'd.features' < pb-ortho.json > pb-nd.ndjson
npm install -g d3-dsv
dsv2json -r ';' -n < dados/PB/DomicilioRenda_PB.csv > pb-censo.ndjson
ndjson-map 'd.Cod_setor = d.properties.CD_GEOCODI, d' < pb-nd.ndjson > pb-saida-ortho-sector.ndjson
ndjson-join 'd.Cod_setor' pb-saida-ortho-sector.ndjson pb-censo.ndjson > resultado-join-geom-censo.ndjson
ndjson-map 'd[0].properties = {renda: Number(d[1].V005.replace(",", "."))}, d[0]' < resultado-join-geom-censo.ndjson > pb-ortho-comdado.ndjson
npm install -g topojson
geo2topo -n tracts=pb-ortho-comdado.ndjson > pb-tracts-topo.json
toposimplify -p 1 -f < pb-tracts-topo.json | topoquantize 1e5 > pb-quantized-topo.json
npm install -g d3
npm install -g d3-scale-chromatic
topo2geo tracts=- < pb-quantized-topo.json | ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 113]), d.features.forEach(f => f.properties.fill = z(f.properties.renda)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -w 1000 -h 600 > pb-tracts-threshold-light.svg

OU PENSANDO MELHOR NAS ESCALAS

topo2geo tracts=- < pb-quantized-topo.json | ndjson-map -r d3 -r d3=d3-scale-chromatic 'z = d3.scaleThreshold().domain([1, 21, 33, 53, 113]).range(d3.schemeOrRd[5]), d.features.forEach(f => f.properties.fill = z(f.properties.renda)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -w 1000 -h 600 > pb-tracts-threshold-light.svg
